{
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.analysis_prompt }}",
        "options": {}
      },
      "id": "bcaf7149-9163-4bc0-94c3-46e6c38dcba0",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        448,
        112
      ]
    },
    {
      "parameters": {
        "model": "qwen3:30b-a3b-q4_K_M",
        "options": {}
      },
      "id": "01ac1309-961e-4f60-b4f8-1451ff502db8",
      "name": "Ollama",
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "typeVersion": 1,
      "position": [
        448,
        320
      ],
      "credentials": {
        "ollamaApi": {
          "id": "XVApAoqugtjwrz2X",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "const inputData = items[0].json;\nconsole.log('Input Data:', JSON.stringify(inputData, null, 2));\n\nlet textContent = '';\nlet filename = 'whatsapp_chat.txt';\n\nif (inputData.body && inputData.body.text) {\n  textContent = inputData.body.text;\n  filename = inputData.body.filename || filename;\n} else if (inputData.body && typeof inputData.body === 'string') {\n  textContent = inputData.body;\n} else if (inputData.text) {\n  textContent = inputData.text;\n} else if (inputData.data) {\n  textContent = inputData.data;\n} else {\n  textContent = JSON.stringify(inputData, null, 2);\n}\n\nif (typeof textContent === 'object') {\n  textContent = JSON.stringify(textContent, null, 2);\n}\n\ntextContent = String(textContent || '');\n\nconsole.log('Text Content Type:', typeof textContent);\nconsole.log('Text Content Length:', textContent.length);\nconsole.log('Text Content Preview:', textContent.substring(0, 200));\n\nconst lines = textContent.split('\\n').filter(line => line.trim());\nconst messages = [];\n\nfor (const line of lines) {\n  const patterns = [\n    /(\\d{1,2}\\.\\d{1,2}\\.\\d{4})\\s+(\\d{1,2}:\\d{2})\\s+-\\s+([^:]+):\\s*(.+)/,\n    /(\\d{1,2}\\.\\d{1,2}\\.\\d{4})\\s+(\\d{1,2}:\\d{2})\\s+([^:]+):\\s*(.+)/,\n    /(\\d{1,2}\\/\\d{1,2}\\/\\d{4})\\s+(\\d{1,2}:\\d{2})\\s+-\\s+([^:]+):\\s*(.+)/\n  ];\n  \n  let match = null;\n  for (const pattern of patterns) {\n    match = line.match(pattern);\n    if (match) break;\n  }\n  \n  if (match) {\n    const [, date, time, sender, message] = match;\n    messages.push({ \n      date: date.trim(), \n      time: time.trim(), \n      sender: sender.trim(), \n      message: message.trim(),\n      fullLine: line\n    });\n  }\n}\n\nconst senderStats = {};\nmessages.forEach(msg => {\n  if (msg.sender) {\n    senderStats[msg.sender] = (senderStats[msg.sender] || 0) + 1;\n  }\n});\n\nconst formatDate = (dateStr) => {\n  const parts = dateStr.split('.');\n  if (parts.length === 3) {\n    const day = parts[0].padStart(2, '0');\n    const month = parts[1].padStart(2, '0');\n    const year = parts[2];\n    return `${day}.${month}.${year}`;\n  }\n  return dateStr;\n};\n\nmessages.sort((a, b) => {\n  const dateA = new Date(formatDate(a.date).split('.').reverse().join('-'));\n  const dateB = new Date(formatDate(b.date).split('.').reverse().join('-'));\n  return dateA - dateB;\n});\n\nconst analysis_prompt = `Bu WhatsApp sohbet metnini analiz et ve tek bir genel yorum yap:\n\nDosya: ${filename}\nKatılımcılar: ${Object.keys(senderStats).join(', ')}\n\nSohbet İçeriği:\n${textContent}\n\nLütfen bu WhatsApp sohbetini analiz et ve tek bir kapsamlı, akıcı Türkçe yorum yap. Sohbetin genel atmosferi, ana konuları, katılımcıların davranışları, duygusal tonu ve genel değerlendirmeyi tek bir paragrafta birleştir.\n\nÖnemli: Sadece Türkçe yanıt ver, <think> tag'ları kullanma, numaralı liste yapma. Tek bir akıcı analiz metni yaz.`;\n\nreturn [{ \n  json: { \n    messages, \n    textContent, \n    analysis_prompt, \n    messageCount: messages.length,\n    filename,\n    senderStats,\n    participants: Object.keys(senderStats),\n    debug: {\n      inputType: typeof inputData,\n      textType: typeof textContent,\n      textLength: textContent.length,\n      parsedMessages: messages.length,\n      participants: Object.keys(senderStats)\n    }\n  } \n}];"
      },
      "id": "06dba9a8-a6e7-40e2-9ce0-065cf7a3dff1",
      "name": "Process Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        256,
        112
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "whatsapp-analysis",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "f802ef68-6bc2-476f-95fc-69a2e1a20cd8",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        48,
        112
      ],
      "webhookId": "whatsapp-webhook"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1104,
        336
      ],
      "id": "f043dd84-1851-405a-96ff-3fa208023767",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "functionCode": "const aiOutput = items[0].json.output || items[0].json.text || 'Analiz tamamlanamadı';\nconst inputData = $input.first().json;\n\nlet cleanOutput = aiOutput;\nif (typeof cleanOutput === 'string') {\n  cleanOutput = cleanOutput.replace(/<think>[\\s\\S]*?<\\/think>/g, '');\n  \n  cleanOutput = cleanOutput.replace(/\\n\\s*\\n\\s*\\n/g, '\\n\\n');\n  \n  cleanOutput = cleanOutput.trim();\n}\n\nreturn [{\n  json: {\n    success: true,\n    analysis: cleanOutput,\n    statistics: {\n      participants: inputData.participants || [],\n      senderStats: inputData.senderStats || {},\n      processedAt: new Date().toISOString()\n    },\n    metadata: {\n      filename: inputData.filename || 'whatsapp_chat.txt',\n      originalLength: inputData.textContent ? inputData.textContent.length : 0,\n      messageCount: inputData.messageCount || 0\n    }\n  }\n}];"
      },
      "id": "ffcd48e0-5a43-4489-9a17-a44e6d89336d",
      "name": "Format Output",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        896,
        336
      ]
    }
  ],
  "connections": {
    "AI Agent": {
      "main": [
        [
          {
            "node": "Format Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ollama": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Process Data": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Process Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Output": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "07086a2d9f7f509c58b7a5c78465311bdcbd07ea448bc37a4b86e0afaea4757a"
  }
}